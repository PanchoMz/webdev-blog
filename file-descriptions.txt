# File Descriptions - WEBDEV.blog Codebase

## üìÅ Root Level Files

### Configuration Files
- **`next.config.ts`** - Next.js configuration file that defines build settings, redirects, and other app-wide configurations. Contains TypeScript support and custom configuration options.
- **`tailwind.config.ts`** - Tailwind CSS configuration file that defines custom colors, fonts, styling rules, dark mode settings, content paths for purging, and plugin configurations.
- **`tsconfig.json`** - TypeScript configuration file that defines compiler options and path mappings for type safety.
- **`eslint.config.mjs`** - ESLint configuration for code linting and formatting rules.
- **`components.json`** - Configuration file for UI components (likely for shadcn/ui components).
- **`postcss.config.mjs`** - PostCSS configuration for CSS processing and Tailwind CSS.

### Authentication & Routing
- **`auth.ts`** - Main NextAuth.js configuration file that exports authentication handlers, auth function, and sign-in/out functions. Includes Prisma adapter, JWT session strategy, and custom events.
- **`auth.config.ts`** - NextAuth.js configuration with providers (Google, GitHub), callbacks, session settings, and credentials provider with password verification.
- **`middleware.ts`** - Next.js middleware function that runs between requests and responses for authentication checks, route protection, and redirects for authenticated/unauthenticated users.
- **`route.ts`** - Route constants file defining redirect paths, public routes, auth routes, and API authentication prefix for the application.

## üìÅ App Directory (Next.js App Router)

### Layout & Pages
- **`app/layout.tsx`** - Root layout component that wraps all pages, provides theme support, navigation, session provider, and basic page structure with Poppins font configuration.
- **`app/page.tsx`** - Home page component displaying the main landing page content with welcome message and foundation for blog features.

### Authentication Pages
- **`app/(auth)/login/page.tsx`** - Login page component with the login form wrapped in a Container for consistent layout and user authentication flow.
- **`app/(auth)/register/page.tsx`** - Registration page component with the sign-up form wrapped in a Container for new user account creation.
- **`app/(auth)/email-verification/page.tsx`** - Email verification page component that handles email verification tokens and user account verification.

### User Pages
- **`app/user/[id]/page.tsx`** - Dynamic user profile page that displays user information based on the ID parameter with foundation for user dashboard functionality.

### API Routes
- **`app/api/auth/[...nextauth]/route.ts`** - NextAuth.js API route handlers for authentication endpoints including sign in/out requests, OAuth provider callbacks, session management, and token refresh.

## üìÅ Components Directory

### Authentication Components
- **`components/auth/LoginForm.tsx`** - Reusable login form component with validation using react-hook-form and Zod, error handling, social authentication integration, and automatic redirects.
- **`components/auth/RegisterForm.tsx`** - Reusable registration form component with validation, error handling, password confirmation, and social authentication options.
- **`components/auth/SocialAuth.tsx`** - Social authentication component for Google, GitHub, and other OAuth providers with consistent styling and error handling.
- **`components/auth/EmailVerificationClient.tsx`** - Client-side email verification component that handles verification tokens, success/error states, and user feedback.

### Common Components
- **`components/common/Button.tsx`** - Reusable button component with different variants, states, loading indicators, and consistent styling across the application.
- **`components/common/FormField.tsx`** - Reusable form input component with validation, error display, accessibility features, and consistent styling.
- **`components/common/Heading.tsx`** - Reusable heading component with different sizes, styles, and typography consistency.
- **`components/common/Alert.tsx`** - Alert component for displaying success, error, warning, and info messages with appropriate styling and icons.

### Layout Components
- **`components/layout/Container.tsx`** - Container component for consistent layout spacing, responsive design, and content width management.
- **`components/layout/NavBar.tsx`** - Navigation bar component with logo, search functionality, theme toggle, user menu, and responsive design.
- **`components/layout/Notifications.tsx`** - Notifications component for displaying user notifications with real-time updates and management.
- **`components/layout/SearchInput.tsx`** - Search input component for site-wide search functionality with autocomplete and filtering.
- **`components/layout/ThemeToggle.tsx`** - Theme toggle component for switching between light/dark modes with smooth transitions and persistent settings.
- **`components/layout/UserButton.tsx`** - User button component showing user avatar, dropdown menu, profile options, and authentication status.

### UI Components
- **`components/ui/avatar.tsx`** - Avatar component for displaying user profile pictures with fallback images and different sizes.
- **`components/ui/dropdown-menu.tsx`** - Dropdown menu component for user actions, navigation, and contextual menus with accessibility features.
- **`components/ui/input.tsx`** - Base input component used by FormField with consistent styling, validation states, and accessibility support.

## üìÅ Actions Directory (Server Actions)

### Authentication Actions
- **`actions/auth/login.ts`** - Server action for handling user login with credential validation, email verification handling, error management, and NextAuth.js integration.
- **`actions/auth/register.ts`** - Server action for handling user registration with password hashing, email verification token creation, duplicate email checking, and database operations.
- **`actions/auth/email-verification.ts`** - Server action for handling email verification with token validation, expiration checking, user verification, and database updates.

## üìÅ Schemas Directory (Validation)

### Authentication Schemas
- **`schemas/LoginSchema.ts`** - Zod schema for login form validation with email format checking, password length requirements, and TypeScript type generation.
- **`schemas/RegisterSchema.ts`** - Zod schema for registration form validation with name length constraints, email validation, password requirements, and password confirmation matching.

## üìÅ Lib Directory (Utilities)

### Database & Utilities
- **`lib/db.ts`** - Prisma database client configuration with global type declarations, singleton pattern for development, and connection management.
- **`lib/user.ts`** - User-related utility functions for database operations including user retrieval by email and error handling.
- **`lib/utils.ts`** - General utility functions including class name merging with clsx and tailwind-merge for CSS optimization and conflict resolution.
- **`lib/emailVerification.ts`** - Email verification utilities for creating tokens, sending verification emails, and managing the verification process.

## üìÅ Prisma Directory

### Database Schema
- **`prisma/schema.prisma`** - Prisma database schema defining User and VerificationToken models with authentication fields, relationships, and database configuration.

## üìÅ Public Directory

### Static Assets
- **`public/logo.svg`** - Application logo and branding assets for consistent visual identity.

---

## Architecture Overview

This structure follows Next.js 13+ App Router conventions with:

### Core Technologies
- **Next.js 13+** with App Router for modern React development
- **TypeScript** for type safety and better developer experience
- **NextAuth.js** for comprehensive authentication system
- **Prisma ORM** for type-safe database operations
- **Tailwind CSS** for utility-first styling
- **Zod** for runtime validation and type inference
- **React Hook Form** for efficient form handling

### Key Features
- **Server Actions** for backend logic without API routes
- **Component-based architecture** for reusability and maintainability
- **Authentication** with multiple providers (Google, GitHub, Credentials)
- **Email verification** system for account security
- **Theme switching** with dark/light mode support
- **Responsive design** for all device sizes
- **Form validation** with real-time feedback
- **Error handling** with user-friendly messages

### Security Features
- **Password hashing** with bcrypt
- **JWT sessions** for secure authentication
- **Email verification** for account validation
- **Route protection** with middleware
- **Input validation** with Zod schemas
- **CSRF protection** with NextAuth.js

### Development Features
- **Hot reloading** for fast development
- **Type safety** throughout the application
- **ESLint** for code quality
- **Prettier** for code formatting
- **Component documentation** with comprehensive comments
- **Modular architecture** for scalability

The application is a modern web blog platform with comprehensive user authentication, theme switching, responsive design, and a solid foundation for building additional features like blog posts, user profiles, and content management. 